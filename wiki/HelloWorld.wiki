The complete Hello World example can be found [http://code.google.com/p/jo-widgets/source/browse/#svn%2Ftrunk%2Fhelloworld here]

----
== The parent pom ===

{{{
    <modelVersion>4.0.0</modelVersion>
    <groupId>org.jowidgets.helloworld</groupId>
    <artifactId>org.jowidgets.helloworld.parent</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>pom</packaging>

    <properties>
        <!-- jowidgets needs java 1.6 or higher -->
        <java.version>1.6</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <jowidgets.version>0.22.0</jowidgets.version>
    </properties>
	
    <repositories>
        <!-- The jowidgets maven repository -->
        <repository>
            <id>jowidgets</id>
            <url>http://jowidgets.org/maven2/</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
    </repositories>
	
    <modules>
        <!-- Hold the ui technology independend hello world code -->
        <module>../org.jowidgets.helloworld.common</module>
		
        <!-- Holds a starter that uses Java Swing -->
        <module>../org.jowidgets.helloworld.starter.swing</module>
		
        <!-- Holds a starter that uses Eclipse SWT (win32) -->
        <module>../org.jowidgets.helloworld.starter.swt</module>
		
        <!-- This module creates a war that uses Eclipse RWT -->
        <module>../org.jowidgets.helloworld.starter.rwt</module>
    </modules>
	
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.3.2</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                </configuration>
            </plugin>
        </plugins>
    </build>
}}}

The complete pom.xml can be found [http://code.google.com/p/jo-widgets/source/browse/trunk/helloworld/org.jowidgets.helloworld.common/pom.xml here].

----

[http://code.google.com/p/jo-widgets/source/browse/trunk/helloworld/org.jowidgets.helloworld.common/src/main/java/org/jowidgets/helloworld/common/HelloWorldApplication.java HelloWorldApplication.java]
{{{
package org.jowidgets.helloworld.common;

import org.jowidgets.api.toolkit.Toolkit;
import org.jowidgets.api.widgets.IButton;
import org.jowidgets.api.widgets.IFrame;
import org.jowidgets.api.widgets.blueprint.IButtonBluePrint;
import org.jowidgets.api.widgets.blueprint.IFrameBluePrint;
import org.jowidgets.common.application.IApplication;
import org.jowidgets.common.application.IApplicationLifecycle;
import org.jowidgets.common.types.Dimension;
import org.jowidgets.common.widgets.controller.IActionListener;
import org.jowidgets.common.widgets.layout.MigLayoutDescriptor;
import org.jowidgets.tools.widgets.blueprint.BPF;

public final class HelloWorldApplication implements IApplication {

    @Override
    public void start(final IApplicationLifecycle lifecycle) {
		
        //Create a frame BluePrint with help of the BluePrintFactory (BPF)
        final IFrameBluePrint frameBp = BPF.frame();
        frameBp.setSize(new Dimension(400, 300)).setTitle("Hello World");

        //Create a frame with help of the Toolkit and BluePrint. This convenience
        //method finishes the ApplicationLifecycle when the root frame will be closed.
        final IFrame frame = Toolkit.createRootFrame(frameBp, lifecycle);

        //Use a simple MigLayout with one column and one row for the frame (a frame is a container also)
        frame.setLayout(new MigLayoutDescriptor("[]", "[]"));

        //Create a button BluePrint with help of the BluePrintFactory (BPF)
        final IButtonBluePrint buttonBp = BPF.button().setText("Hello World");

        //Add the button defined by the BluePrint to the frame
        final IButton button = frame.add(buttonBp);

        //Add an ActionListener to the button
        button.addActionListener(new IActionListener() {
            @Override
            public void actionPerformed() {
                System.out.println("Hello World");
            }
        });

        //set the root frame visible
        frame.setVisible(true);
    }
}
}}}